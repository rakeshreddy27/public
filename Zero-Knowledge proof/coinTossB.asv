% Bayesian Coin Toss Analysis
clear; clc; close all;

% Define experiment parameters
n = 1000;    % Total number of coin tosses
p_true = 0.51;  % True probability of heads (unknown to us)
tosses = rand(n, 1) < p_true;  % Simulate coin tosses (1 = Head, 0 = Tail)
numHeads = sum(tosses);   % Count number of heads
numTails = n - numHeads;  % Count number of tails

fprintf('Number of Heads: %d\n', numHeads);
fprintf('Number of Tails: %d\n', numTails);

% Define prior parameters (Uniform prior: Beta(1,1))
alpha_prior = 1;
beta_prior = 1;

% Compute posterior parameters (Bayesian update)
alpha_post = alpha_prior + numHeads;
beta_post = beta_prior + numTails;

% Define range of probability values for plotting
p_values = linspace(0, 1, 1000);  

% Compute the Prior Distribution (Beta PDF)
prior_pdf = beta_pdf_custom(p_values, alpha_prior, beta_prior);

% Compute the Posterior Distribution (Updated Beta PDF)
posterior_pdf = beta_pdf_custom(p_values, alpha_post, beta_post);

disp(posterior_pdf);

% Plot Prior and Posterior Distributions
figure;
plot(p_values, prior_pdf, 'b--', 'LineWidth', 2); hold on;  % Prior (blue dashed)
plot(p_values, posterior_pdf, 'r-', 'LineWidth', 2);  % Posterior (red solid)
xlabel('Probability of Heads (p)');
ylabel('Density');
title('Bayesian Update: Prior vs Posterior');
legend('Prior (Beta(1,1))', sprintf('Posterior (Beta(%d,%d))', alpha_post, beta_post));
grid on;
hold off;

% Function to compute Beta PDF
function pdf_vals = beta_pdf_custom(x, alpha, beta)
    % Computes Beta PDF for given values x, with shape parameters alpha, beta
    pdf_vals = zeros(size(x));
    for i = 1:length(x)
        pdf_vals(i) = (x(i)^(alpha-1) * (1-x(i))^(beta-1)) / beta_function_custom(alpha, beta);
    end
end

% Function to compute Beta function (without built-in functions)
function B = beta_function_custom(a, b)
    % Beta function is defined as B(a, b) = Gamma(a) * Gamma(b) / Gamma(a + b)
    B = gamma_function_custom(a) * gamma_function_custom(b) / gamma_function_custom(a + b);
end

% Function to compute Gamma function using an approximation
function G = gamma_function_custom(z)
    % Stirling's approximation for Gamma function
    G = sqrt(2 * pi / z) * (z / exp(1))^z;
end
